import 'package:flutter/material.dart';
import 'package:phcl_accounts/features/dashboard/domain/entities/dashboard_data.dart';
import 'package:syncfusion_flutter_charts/charts.dart';

/// A sophisticated cartesian line chart widget for financial data visualization.
///
/// This widget provides advanced chart capabilities specifically designed for
/// displaying financial trends, revenue patterns, and ML-based predictions
/// in the PHCL Accounts dashboard application.
///
/// ## Key Features:
///
/// ### ðŸ“ˆ **Dual-Series Visualization**
/// - **Historical Data**: Solid line series for actual financial data
/// - **ML Predictions**: Dashed line series for forecasted values
/// - **Visual Distinction**: Different colors and line styles for clarity
/// - **Interactive Legend**: Toggle visibility of data series
///
/// ### ðŸŽ¯ **Adaptive Display Modes**
/// - **Daily Mode**: Optimized for short-term trend analysis (â‰¤ 45 days)
/// - **Monthly Mode**: Configured for long-term pattern visualization
/// - **Smart Labeling**: Automatic label rotation based on data density
/// - **Responsive Layout**: Adapts to different screen sizes and orientations
///
/// ### ðŸ”§ **Interactive Features**
/// - **Tooltips**: Hover/tap to see precise values and dates
/// - **Data Labels**: Automatically shown for datasets â‰¤ 10 points
/// - **Markers**: Visual indicators for each data point
/// - **Zoom & Pan**: Built-in navigation for large datasets
///
/// ### ðŸŽ¨ **Theming & Customization**
/// - **Color Theming**: Respects app theme colors with override options
/// - **Conditional Styling**: Different visual treatments based on data type
/// - **Accessibility**: Proper contrast and readable font sizes
/// - **Responsive Text**: Adapts to system accessibility settings
///
/// ## Usage Examples:
///
/// ### Basic Revenue Trend Chart
/// ```dart
/// CartesianLineChart(
///   data: revenueData,
///   title: 'Revenue',
///   color: Colors.green,
///   displayMode: ChartDisplayMode.monthly,
/// )
/// ```
///
/// ### Chart with ML Predictions
/// ```dart
/// CartesianLineChart(
///   data: historicalData,
///   title: 'Revenue',
///   predictionData: mlPredictions,
///   displayMode: ChartDisplayMode.daily,
///   color: Theme.of(context).primaryColor,
/// )
/// ```
///
/// ### Income vs Expense Comparison
/// ```dart
/// CartesianLineChart(
///   data: incomeData,
///   title: 'Income',
///   color: Colors.green,
///   displayMode: chartMode,
/// )
/// ```
///
/// ## Technical Implementation:
/// - Built on Syncfusion Flutter Charts for performance and features
/// - Optimized for financial data patterns and requirements
/// - Memory-efficient handling of large datasets
/// - Smooth animations and transitions
class CartesianLineChart extends StatelessWidget {
  /// The primary dataset to display as the main line series.
  ///
  /// Contains historical financial data points with time-based keys
  /// and corresponding numerical values (amounts, totals, etc.).
  final List<ChartData> data;

  /// The descriptive title for the chart and data series.
  ///
  /// Used in chart title, legend, and accessibility labels.
  /// Examples: "Revenue", "Income", "Expenses", "Net Profit"
  final String title;

  /// Optional color override for the primary data series.
  ///
  /// If null, uses the app's primary theme color for consistency.
  /// Recommended colors:
  /// - Green tones for income/profit data
  /// - Red tones for expense/loss data
  /// - Blue tones for neutral financial metrics
  final Color? color;

  /// Optional ML prediction data displayed as a secondary series.
  ///
  /// When provided, shows future forecasted values as a dashed line
  /// with distinct styling to differentiate from historical data.
  /// Generated by the ML prediction algorithms in the repository layer.
  final List<ChartData>? predictionData;

  /// Display mode determining chart optimization and label formatting.
  ///
  /// - **Daily Mode**: For short-term analysis with day-level granularity
  /// - **Monthly Mode**: For long-term trends with month-level aggregation
  /// - **Null**: Uses default formatting suitable for most cases
  final ChartDisplayMode? displayMode;

  /// Creates a new cartesian line chart widget.
  ///
  /// ## Required Parameters:
  /// - [data]: Primary dataset for the main line series
  /// - [title]: Chart title and series name
  ///
  /// ## Optional Parameters:
  /// - [color]: Override color for the primary series (defaults to theme primary)
  /// - [displayMode]: Optimization mode for different time granularities
  /// - [predictionData]: ML forecast data for secondary dashed series
  ///
  /// ## Example:
  /// ```dart
  /// CartesianLineChart(
  ///   data: monthlyRevenue,
  ///   title: 'Monthly Revenue',
  ///   color: Colors.green.shade600,
  ///   displayMode: ChartDisplayMode.monthly,
  ///   predictionData: futurePredictions,
  /// )
  /// ```
  const CartesianLineChart({
    super.key,
    required this.data,
    required this.title,
    this.color,
    this.displayMode,
    this.predictionData,
  });

  @override
  Widget build(BuildContext context) {
    // Build the chart with Syncfusion's high-performance cartesian chart
    return SfCartesianChart(
      // Chart title with dynamic coloring based on theme or override
      title: ChartTitle(
        text: '$title Trend',
        textStyle: TextStyle(
          color: color ?? Theme.of(context).colorScheme.primary,
        ),
      ),
      // Interactive legend for toggling series visibility
      legend: const Legend(isVisible: true),

      // X-axis configuration optimized for date/time data
      primaryXAxis: CategoryAxis(
        // Adaptive label rotation based on display mode density
        labelRotation: displayMode == ChartDisplayMode.daily ? -45 : -90,
        // Handle overlapping labels gracefully with multiple rows
        labelIntersectAction: AxisLabelIntersectAction.multipleRows,
      ),

      // Enable interactive tooltips for precise value inspection
      tooltipBehavior: TooltipBehavior(enable: true),

      // Define chart series with historical and prediction data
      series: <CartesianSeries<ChartData, String>>[
        // Primary series: Historical financial data
        LineSeries<ChartData, String>(
          dataSource: data,
          xValueMapper: (ChartData sales, _) => sales.key, // Date/period labels
          yValueMapper: (ChartData sales, _) =>
              sales.value, // Financial amounts
          name: title,
          color: color,

          // Smart data label visibility based on data density
          dataLabelSettings: DataLabelSettings(
            isVisible: data.length <= 10, // Only show labels for small datasets
            labelAlignment: ChartDataLabelAlignment.auto,
          ),

          // Visual markers for each data point
          markerSettings: const MarkerSettings(isVisible: true),
        ),

        // Secondary series: ML-based prediction data (conditional)
        if (predictionData != null && predictionData!.isNotEmpty)
          LineSeries<ChartData, String>(
            dataSource: predictionData!,
            xValueMapper: (ChartData sales, _) =>
                sales.key, // Future date labels
            yValueMapper: (ChartData sales, _) =>
                sales.value, // Predicted amounts
            name: 'Predicted $title',

            // Distinct orange color for predictions
            color: Colors.orange,

            // Dashed line pattern to differentiate from historical data
            dashArray: const <double>[5, 5], // 5px dash, 5px gap pattern
            // Adaptive data label visibility for prediction series
            dataLabelSettings: DataLabelSettings(
              isVisible: predictionData!.length <= 10,
              labelAlignment: ChartDataLabelAlignment.auto,
            ),

            // Markers for prediction data points
            markerSettings: const MarkerSettings(isVisible: true),
          ),
      ],
    );
  }
}
